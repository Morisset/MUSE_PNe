#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Sep  9 17:11:41 2021

@author: christophemorisset
"""
import os
from pathlib import Path
import pandas as pd

#%% Define dictionnaries hektor to pyneb
l_dics = {'NGC6778': {'4641.0' : ('N', 3, '4641A', 1),
                      '4651.0' : ('O', 2, '4649.13A', 1),
                     '4662.0' : ('O', 2, '4661.63A', 1),
                     '4686.0' : ('He', 2, '4686A', 1),
                     '4711.0' : ('Ar', 4, '4711A', 0),
                     '4713.0' : ('He', 1, '4713A', 1),
                     '4741.0' : ('Ar', 4, '4740A', 0),
                     '4861.0' : ('H', 1, '4861A', 1),
                     '4959.0' : ('O', 3, '4959A', 0),
                     '5200.0' : ('N', 1, '5199A+', 0),
                     '5343.0' : ('C', 2, '5342.0A', 1),
                     '5519.0' : ('Cl', 3, '5518A', 0),
                     '5539.0' : ('Cl', 3, '5538A', 0),
                     '5677' : ('N', 2, '5676.02A', 1),
                     '5681.0' : ('N', 2, '5679.56A', 1),
                     '5755.0' : ('N', 2, '5755A', 0),
                     '5877' : ('He', 1, '5876A', 1),
                     '6301.0' : ('O', 1, '6300A', 0),
                     '6313' : ('S', 3, '6312A', 0),
                     '6365.0' : ('O', 1, '6364A', 0),
                     '6463.0' : ('C', 2, '6462.0A', 1),
                     '6549.0' : ('N', 2, '6548A', 0),
                     '6564.0' : ('H', 1, '6563A', 1),
                     '6585.0' : ('N', 2, '6584A', 0),
                     '6679.0' : ('He', 1, '6678A', 1),
                     '6719.0' : ('S', 2, '6716A', 0),
                     '6733.0' : ('S', 2, '6731A', 0),
                     '7006.0' : ('Ar', 5, '7005A', 0),
                     '7067.0' : ('He', 1, '7065A', 1),
                     '7137.0' : ('Ar', 3, '7136A', 0),
                     '7283' : ('He', 1, '7281A', 1),
                     '7321.0' : ('O', 2, '7319A+', 0),
                     '7332.0' : ('O', 2, '7330A+', 0),
                     '7532.0' : ('Cl', 4, '7531A', 0),
                     '7753.0' : ('Ar', 3, '7751A', 0),
                     '7772.0' : ('O', 1, '7771A', 1),
                     '7774.0' : ('O', 1, '7773A', 1),
                     '7777' : ('O', 1, '7775A', 1),
                     '8048.0' : ('Cl', 4, '8046A', 0),
                     '8730.0' : ('C', 1, '8728A', 0),
                     '8753.0' : ('H', 1, '8750A', 1), 
                     '9071.0' : ('S', 3, '9069A', 0),
                     '9229.0' : ('H', 1, '9229A', 1)
                     },
           'HF22': {'4641.0' : ('N', 3, '4641A', 1),
                      '4651.0' : ('O', 2, '4649.13A', 1),
                     '4662.0' : ('O', 2, '4661.63A', 1),
                     '4686.0' : ('He', 2, '4686A', 1),
                     '4711.0' : ('Ar', 4, '4711A', 0),
                     '4713.0' : ('He', 1, '4713A', 1),
                     '4741.0' : ('Ar', 4, '4740A', 0),
                     '4861.0' : ('H', 1, '4861A', 1),
                     '4959.0' : ('O', 3, '4959A', 0),
                     '5200.0' : ('N', 1, '5199A+', 0),
                     '5343.0' : ('C', 2, '5342.0A', 1),
                     '5519.0' : ('Cl', 3, '5518A', 0),
                     '5539.0' : ('Cl', 3, '5538A', 0),
                     '5677' : ('N', 2, '5676.02A', 1),
                     '5681.0' : ('N', 2, '5679.56A', 1),
                     '5755.0' : ('N', 2, '5755A', 0),
                     '5877' : ('He', 1, '5876A', 1),
                     '6301.0' : ('O', 1, '6300A', 0),
                     '6313' : ('S', 3, '6312A', 0),
                     '6365.0' : ('O', 1, '6364A', 0),
                     '6463.0' : ('C', 2, '6462.0A', 1),
                     '6549.0' : ('N', 2, '6548A', 0),
                     '6564.0' : ('H', 1, '6563A', 1),
                     '6585.0' : ('N', 2, '6584A', 0),
                     '6679.0' : ('He', 1, '6678A', 1),
                     '6719.0' : ('S', 2, '6716A', 0),
                     '6733.0' : ('S', 2, '6731A', 0),
                     '7006.0' : ('Ar', 5, '7005A', 0),
                     '7067.0' : ('He', 1, '7065A', 1),
                     '7137.0' : ('Ar', 3, '7136A', 0),
                     '7283' : ('He', 1, '7281A', 1),
                     '7321.0' : ('O', 2, '7319A+', 0),
                     '7332.0' : ('O', 2, '7330A+', 0),
                     '7532.0' : ('Cl', 4, '7531A', 0),
                     '7753.0' : ('Ar', 3, '7751A', 0),
                     '7772.0' : ('O', 1, '7771A', 1),
                     '7774.0' : ('O', 1, '7773A', 1),
                     '7777' : ('O', 1, '7775A', 1),
                     '8048.0' : ('Cl', 4, '8046A', 0),
                     '8730.0' : ('C', 1, '8728A', 0),
                     '8753.0' : ('H', 1, '8750A', 1), 
                     '9071.0' : ('S', 3, '9069A', 0),
                     '9229.0' : ('H', 1, '9229A', 1)
                     },          
           'M142': {'4640.0' : ('N', 3, '4641A', 1),
                 '4648.0' : ('O', 2, '4649.13A', 1),
                 '4660.0' : ('O', 2, '4661.63A', 1),
                 '4684.0' : ('He', 2, '4686A', 1),
                 '4710.0' : ('Ar', 4, '4711A', 0),
                 '4711.0' : ('He', 1, '4713A', 1),
                 '4739.0' : ('Ar', 4, '4740A', 0),
                 '4860.0' : ('H', 1, '4861A', 1),
                 '4958.0' : ('O', 3, '4959A', 0),
                 '5198.0' : ('N', 1, '5199A+', 0),
                 '5343.0' : ('C', 2, '5342.0A', 1),
                 '5516.0' : ('Cl', 3, '5518A', 0),
                 '5536.0' : ('Cl', 3, '5538A', 0),
                 '5677' : ('N', 2, '5679.56A', 1),
                 '5753.0' : ('N', 2, '5755A', 0),
                 '5874' : ('He', 1, '5876A', 1),
                 '6299.0' : ('O', 1, '6300A', 0),
                 '6310' : ('S', 3, '6312A', 0),
                 '6362.0' : ('O', 1, '6364A', 0),
                 '6460.0' : ('C', 2, '6462.0A', 1),
                 '6546.0' : ('N', 2, '6548A', 0),
                 '6561.0' : ('H', 1, '6563A', 1),
                 '6582.0' : ('N', 2, '6584A', 0),
                 '6677.0' : ('He', 1, '6678A', 1),
                 '6715.0' : ('S', 2, '6716A', 0),
                 '6729.0' : ('S', 2, '6731A', 0),
                 '7006.0' : ('Ar', 5, '7005A', 0),
                 '7063.0' : ('He', 1, '7065A', 1),
                 '7134.0' : ('Ar', 3, '7136A', 0),
                 '7280.0' : ('He', 1, '7281A', 1),
                 '7318.0' : ('O', 2, '7319A+', 0),
                 '7328.0' : ('O', 2, '7330A+', 0),
                 '7528.0' : ('Cl', 4, '7531A', 0),
                 '7749.0' : ('Ar', 3, '7751A', 0),
                 '7770.0' : ('O', 1, '7771A', 1),
                 '7772.0' : ('O', 1, '7773A', 1),
                 '7773' : ('O', 1, '7775A', 1),
                 '8044.0' : ('Cl', 4, '8046A', 0),
                 '8725.0' : ('C', 1, '8728A', 0),
                 '8748.0' : ('H', 1, '8750A', 1), 
                 '9067.0' : ('S', 3, '9069A', 0),
                 '9227.0' : ('H', 1, '9229A', 1)
                 }
          }

#%% Rename files from Hektor to PyNeb

def rename_files(obj_name):
    
    """
    example:
        rename_files(obj_name = 'NGC6778')
    """
    data_dir = Path(os.environ['MUSE_DATA']) / Path('{}/maps'.format(obj_name))
    name = '{}_MUSE_'.format(obj_name)
    newname = '{}_MUSE_b_'.format(obj_name)
    
    for lam_str in l_dics[obj_name]:
        l = l_dics[obj_name][lam_str]
        if l[3] == 1:
            rec_str = 'r'
        else:
            rec_str = ''
        data_file = data_dir / Path('{}{}.fits'.format(name, lam_str))
        new_data_file = data_dir / Path('{}{}{}{}_{}.fits'.format(newname, l[0], l[1], rec_str, l[2]))
        edata_file1 = data_dir / Path('{}{}_error.fits'.format(name, lam_str))
        new_edata_file1 = data_dir / Path('{}{}{}{}_{}_error.fits'.format(newname, l[0], l[1], rec_str, l[2]))
        edata_file2 = data_dir / Path('{}{}_error_alfalike.fits'.format(name, lam_str))
        new_edata_file2 = data_dir / Path('{}{}{}{}_{}_error_alfalike.fits'.format(newname, l[0], l[1], rec_str, l[2]))
        if data_file.exists():
            print(data_file, '->', new_data_file)
            data_file.rename(new_data_file)
        if edata_file1.exists():
            print(edata_file1, '->', new_edata_file1)
            edata_file1.rename(new_edata_file1)
        if edata_file2.exists():
            print(edata_file2, '->', new_edata_file2)
            edata_file2.rename(new_edata_file2)
#%% Compact intens tables

def merge_Intens(f1='NGC6778_4000R1_Intens.tex', 
            f2='M142_4000R1_Intens.tex',
            f3='HF22_4000R1_Intens.tex',
            fo='All_4000R1_Intens.tex'):
    
    d1 = pd.read_csv('figures/{}'.format(f1), delimiter='&', names=('ID', 'I1', 'F1'))
    d2 = pd.read_csv('figures/{}'.format(f2), delimiter='&', names=('ID', 'I2', 'F2'))
    d3 = pd.read_csv('figures/{}'.format(f3), delimiter='&', names=('ID', 'I3', 'F3'))
    for d in (d1, d2, d3):
        d.set_index('ID', inplace=True)
    do = d1
    do['I2'] = d2['I2']
    do['F2'] = d2['F2']
    do['I3'] = d3['I3']
    do['F3'] = d3['F3']
    do.to_csv('figures/'+fo, sep='&', line_terminator='\\\\\n', quotechar=' ')
